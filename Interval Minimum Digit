"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""
class stNode(object):
    def __init__(self, start, end, Min):
        self.start = start; self.end = end; self.Min = Min;
        self.left = None;
        self.right = None;

class Solution:
    """
    @param: A: An integer array
    @param: queries: An query list
    @return: The result list
    """
        
    
    def intervalMinNumber(self, A, queries):        #Operation
        # write your code here
        tree = self.build(0, len(A) - 1, A);
        re = [];
        for item in queries:    #Items in quiry are defined as Interval
            start = item.start;
            end = item.end;
            re.append(self.search(tree, start, end));
        return re;
        
    def build(self, start, end, A):         #Build SegmentTree

        node = stNode(start, end, A[start]);
        
        if start > end:
            node = None;
            return node;
        
        if start == end:
            return node;
            
        mid = (start + end) / 2;
        node.left = self.build(start, mid, A);
        node.right = self.build(mid + 1, end, A);
        
        node.Min = min(node.left.Min, node.right.Min);
        
        return node;

    def search(self, node, start, end):
            
        if end < node.start or start > node.end:
            return 0x7fffffff;
            
        if start <= node.start and node.end <= end:
            return node.Min;
            
        return min(self.search(node.left, start, end), self.search(node.right, start, end));
            
        
        
            
            
            
            
            
            
            
            
            
                
